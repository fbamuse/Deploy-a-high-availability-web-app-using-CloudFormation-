Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    KeyName:
        Description: ssh pair key name
        Type: String
    AutoscaleMax: 
        Description: AutoScaling MaxSize
        Type: String
        Default: "5"
    AutoscaleMin:
        Description: AutoScaling MinSize
        Type: String
        Default: "3"




Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0


  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/cloud-init-output.log|logger -t user-data -s 2>/dev/console) 2>&1
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
      IamInstanceProfile: !Ref 'ProfileWithRolesForOurApp'
      ImageId: ami-07b4f3c02c7f83d59
      KeyName: !Sub "${KeyName}"
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3a.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'


  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Sub "${AutoscaleMin}"
      MaxSize: !Sub "${AutoscaleMax}"
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue:
         !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue:
         !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

      
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP


  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

#instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  
  ProfileWithRolesForOurApp:
    Type:  AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - 
          Ref: "UdacityS3ReadOnlyEC2"
  
  
  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion server
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
#      Tags:
#        - Key: Name
#          Value: !Sub "${ProjectName} Bastion Security Group"

  BastionPublicSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Sub "${KeyName}"
      SubnetId:
        Fn::ImportValue:
         !Sub "${EnvironmentName}-PUB1-SN"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
#      Tags:
#        - Key: Name
#          Value: !Sub ${ProjectName} Bastion Host 1

  BastionPublicSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Sub "${KeyName}"
      SubnetId:
        Fn::ImportValue:
         !Sub "${EnvironmentName}-PUB2-SN"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
#      Tags:
#        - Key: Name
#          Value: !Sub ${ProjectName} Bastion Host 2

  
Outputs:
  WebAppLoadBalancerDNSName:
      Description: DNS name or Public URL of the Load Balancer
      Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
      Export:
          Name: !Sub ${EnvironmentName}-LB-DNSName